/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.denning.demo.api;

import com.denning.demo.model.User;
import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-12-05T14:50:01.382-05:00[America/New_York]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi
{

    /**
     * GET /user/all : Gets all users
     *
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Gets all users", nickname = "userAllGet", notes = "", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = User.class, responseContainer = "List") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> userAllGet();
    
    /**
     * GET /user/friends : Gets all friends
     *
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Gets all users", nickname = "userAllGet", notes = "", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = User.class, responseContainer = "List") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user/friends",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> userFriendsGet(@NotNull @ApiParam(value = "The current user", required = true) 
    										@Valid @RequestParam(value = "username", required = true) String username);

    /**
     * POST /user/friends : Gets all friends
     *
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Gets all users", nickname = "userAllGet", notes = "", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = User.class, responseContainer = "List") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user/friends",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> userFriendsAdd(@NotNull @ApiParam(value = "The current user", required = true) 
    										@Valid @RequestParam(value = "username", required = true) String username,
    										@NotNull @ApiParam(value = "The friend to add", required = true) 
											@Valid @RequestParam(value = "friend", required = true) String friendUsername);

    /**
     * GET /user/login : Logs user into the system
     *
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @return successful operation (status code 200)
     *         or Invalid username/password supplied (status code 400)
     */
    @ApiOperation(value = "Logs user into the system", nickname = "userLoginGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid username/password supplied") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user/login",
        method = RequestMethod.GET)
    ResponseEntity<String> userLoginGet(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password);


    /**
     * GET /user/logout : Logs out current logged in user session
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Logs out current logged in user session", nickname = "userLogoutGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    ResponseEntity<Void> userLogoutGet();


    /**
     * POST /user : Create user
     * This can only be done by the logged in user.
     *
     * @param user  (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Create user", nickname = "userPost", notes = "This can only be done by the logged in user.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @CrossOrigin(origins = "*")
    @RequestMapping(value = "/user",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> userPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User user);

    
    /**
     * DELETE /user : Delete user
     * This can only be done if the user being deleted is the current user. That will be handled by the application.
     *
     * @param username  (optional)
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Delete user", nickname = "userDelete", notes = "This can only be done if the user being deleted is the current user. That will be handled by the application.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation") })
    @RequestMapping(value = "/user",
        method = RequestMethod.DELETE)
    ResponseEntity<String> userDelete(@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username);

}
